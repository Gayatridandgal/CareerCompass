// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that recommends career paths based on student inputs.
 * This version uses a simplified, rule-based "local model" instead of an LLM.
 *
 * - recommendCareers - A function that handles the career recommendation process.
 * - RecommendCareersInput - The input type for the recommendCareers function.
 * - RecommendCareersOutput - The return type for the recommendCareers function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendCareersInputSchema = z.object({
  interests: z.string().describe('The interests of the student.'),
  subjects: z.string().describe('The subjects the student is studying.'),
  strengths: z.string().describe('The strengths of the student.'),
});
export type RecommendCareersInput = z.infer<typeof RecommendCareersInputSchema>;

const CareerPathSchema = z.object({
  careerName: z.string().describe('The name of the career path.'),
  description: z.string().describe('A brief description of the career path.'),
  fitScore: z.number().describe('A score indicating how well the career path fits the student (0-100).'),
  strengthsAlignment: z.string().describe('Explanation of how the student strengths align with this career path.'),
});

const RecommendCareersOutputSchema = z.array(CareerPathSchema).describe('An array of recommended career paths.');
export type RecommendCareersOutput = z.infer<typeof RecommendCareersOutputSchema>;

export async function recommendCareers(input: RecommendCareersInput): Promise<RecommendCareersOutput> {
  return recommendCareersFlow(input);
}

// Define a Genkit tool that acts as our simplified "local model"
const simpleCareerPredictorTool = ai.defineTool(
  {
    name: 'simpleCareerPredictorTool',
    description: 'A simplified rule-based model to predict career paths based on student inputs.',
    inputSchema: RecommendCareersInputSchema,
    outputSchema: RecommendCareersOutputSchema,
  },
  async (input: RecommendCareersInput): Promise<RecommendCareersOutput> => {
    const recommendations: RecommendCareersOutput = [];
    const interestsLower = input.interests.toLowerCase();
    const subjectsLower = input.subjects.toLowerCase();
    const strengthsLower = input.strengths.toLowerCase();

    if (interestsLower.includes('coding') || subjectsLower.includes('computer science') || strengthsLower.includes('problem solving')) {
      recommendations.push({
        careerName: 'Software Developer (Rule-Based Model)',
        description: 'Designs, develops, and maintains software applications. This recommendation is from a simplified rule-based model.',
        fitScore: 85,
        strengthsAlignment: `Your inputs (Interests: '${input.interests}', Subjects: '${input.subjects}', Strengths: '${input.strengths}') suggest a good fit for software development due to analytical and technical aspects.`,
      });
    }

    if (interestsLower.includes('art') || interestsLower.includes('design') || subjectsLower.includes('art') || strengthsLower.includes('creative')) {
      recommendations.push({
        careerName: 'Graphic Designer (Rule-Based Model)',
        description: 'Creates visual concepts to communicate ideas that inspire, inform, or captivate consumers. This recommendation is from a simplified rule-based model.',
        fitScore: 80,
        strengthsAlignment: `Your artistic interests ('${input.interests}') and creative strengths ('${input.strengths}') align well with graphic design.`,
      });
    }
    
    if (interestsLower.includes('helping others') || subjectsLower.includes('psychology') || strengthsLower.includes('empathy')) {
      recommendations.push({
        careerName: 'Social Worker (Rule-Based Model)',
        description: 'Helps individuals, families, and groups cope with problems in their everyday lives. This recommendation is from a simplified rule-based model.',
        fitScore: 78,
        strengthsAlignment: `Your desire to help others ('${input.interests}') and empathetic strengths ('${input.strengths}') are valuable in social work.`,
      });
    }

    if (recommendations.length === 0) {
      recommendations.push({
        careerName: 'General Project Coordinator (Rule-Based Model)',
        description: 'Coordinates projects and ensures they run smoothly. This is a general suggestion from a simplified rule-based model.',
        fitScore: 65,
        strengthsAlignment: `Your listed subjects ('${input.subjects}') and general strengths ('${input.strengths}') can be applied to project coordination.`,
      });
    }
    
    // Ensure a consistent number of recommendations, filling with a generic one if needed
    while (recommendations.length < 2 && recommendations.length < 3) {
        let alreadyRecommended = recommendations.find(r => r.careerName.includes('General Analyst'));
        if (!alreadyRecommended) {
             recommendations.push({
                careerName: 'General Analyst (Rule-Based Model)',
                description: 'Analyzes data and provides insights for various fields. This recommendation is from a simplified rule-based model.',
                fitScore: 70,
                strengthsAlignment: `Your analytical skills highlighted in subjects ('${input.subjects}') and strengths ('${input.strengths}') could be applied to an analyst role.`,
            });
        } else {
            break; // Avoid infinite loop if all general roles are somehow exhausted or duplicated
        }
    }


    return recommendations.slice(0, 3); // Return up to 3 recommendations
  }
);

// The prompt is no longer needed as we are using the local tool.
/*
const prompt = ai.definePrompt({
  name: 'recommendCareersPrompt',
  input: {schema: RecommendCareersInputSchema},
  output: {schema: RecommendCareersOutputSchema},
  prompt: `You are a career counselor who provides personalized career recommendations to students.

  Based on the student's interests, subjects, and strengths, recommend 3-5 suitable career paths.
  For each career path, provide a description, a fit score (0-100), and an explanation of how the student's strengths align with the career path.

  Student Interests: {{{interests}}}
  Subjects Studied: {{{subjects}}}
  Strengths: {{{strengths}}}

  Format the output as a JSON array of career paths:
  [
    {
      "careerName": "",
      "description": "",
      "fitScore": 0,
      "strengthsAlignment": ""
    }
  ]
  `,
});
*/

const recommendCareersFlow = ai.defineFlow(
  {
    name: 'recommendCareersFlow',
    inputSchema: RecommendCareersInputSchema,
    outputSchema: RecommendCareersOutputSchema,
  },
  async (input: RecommendCareersInput) => {
    // Call the simpleCareerPredictorTool instead of the LLM prompt
    const recommendations = await simpleCareerPredictorTool(input);
    return recommendations;
  }
);